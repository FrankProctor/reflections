

When would you want to use a remote repository rather than keeping all your work local? When you are collaborating with others. When you want to ensure you have a backup.

'git pull origin master' pulling files from remote: the remote I am pulling from;  the branch I want to pull (master branch on remote)

'git push origin master' pushing files to remote: the remote I want to send changes to; the name of the local branch I'd like to push. (if you want to push a branch other than master, simply use that name instead).

'git remote -v' - remote but with additional information, including the URL). V stands for verbose.

'git add origin git@githubURL....' to add the repository (URL) on GitHub as a remote (origin is the name I'll use in this repository to refer to the repository on GitHub.)

'git remote' - Shows you all the current remotes. Allows you to view and create remotes (on GitHub)

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?  By pulling changes manually, you can control when you consolidate changes into groups before pulling them, otherwise it would result in too many commits.

a fork is just a clone that GitHub makes for you on their own machines; forks all link back to the original.

'git clone git@githubURL....' clones that repository to my own computer. Also, git automatically sets up a remote (called origin) pointing to the GitHub repository you cloned from.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
FORK - is a kind of "clone" within GitHub itself. Allows you to "clone" a repository created by someone else, even if you don't have permission to edit their repository.
CLONE- copy within your local machine, or from GitHub to your local machine.
BRANCH - a new extension of an existing project, connects back to parent.

'git fetch origin' fetches the latest GitHub commit onto local as a separate branch

'git merge master origin/master' which merges the two resulting local branches.


IN REALITY, 'git pull origin master' is equivalent to two separate steps: 1) 'git fetch origin' which fetches the latest GitHub commit as a separate branch; AND 2) 'git merge master origin/master' which merges the two resulting branches.


What is the benefit of having a copy of the last known state of the remote stored locally?
So that you will have it to refer to if you need to work offline. And so you can easily merge your changes into it.


git branch new_branch_name
git checkout new_branch_name
git add edited_file_name
git commit
git push origin new_branch_name


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?  Using GoogleDocs? Harder to compare file to file, and would have to do more manual searching. Also, no branching to make sure you don't mess up the master file. Or, even more complicated if you have to email files back and forth. 


In a collaborative environment, only make changes to master (GitHub) through Pull requests. Otherwise, things can change out from under you without notification.

If you want to look before you pull:
git fetch
git merge origin/master master

if you don't need to look (already know the changes you're pulling):
git pull origin master

then ...
git merge master different oil
(now you may get conflict) => RESOLVE
git commit -m "resolve merge and commit"
OR, you may need to start with: git add filename
THEN, git push origin different-oil
git log -n 1

fork - A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project. Most commonly, forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own idea.

fetch - You can do a git fetch at any time to update your remote-tracking branches under refs/remotes/<remote>/ . This operation never changes any of your own local branches under refs/heads , and is safe to do without changing your working copy.

pull request - Pull requests let you tell others about changes you've pushed to a GitHub repository. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.

fast-forward merge - Because the commit pointed to by the branch you merged in was directly upstream of the commit you’re on, Git simply moves the pointer forward. To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit’s history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together – this is called a “fast-forward.” Changes where a branch points.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have? 
If you are collaborating, create a new branch and make changes on it so others will not find the master changed out from under them. Once the branch incorporates your chane(s), you can send a pull request and get feedback from others, who can choose to comment or to merge your change into master. If there is a conflict with some change they have made, then you can pull everything back to your local git, resolve any conflicts, then repeat the process: push your updated branch to GitHub and then send around a pull request.  




