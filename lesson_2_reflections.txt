What happens when you initialize a repository? Why do you need to do it?

Creates a git repository holding all files in a directory. Then run git status. Then you can begin utilizing git features on all files in the directory.

How is the staging area different from the working directory and the repository? What value do you think it offers? Staging area is a zone between working directory and repository. It contains only the files that you want to rack together, which may not be all the files in the working directory.

Here's a change just to test: 
git commit -m "I just added this change for a test"

git diff  Compares working directory to staging area
git diff --staged  Compares staging area and most recent commit
git diff commit1 commit2  Compares most recent commit (commit1) to previous commit (commit2) 

How can you use the staging area to make sure you have one commit per logical change?
By comparing that staging area, first to the directory, then to the latest commit. You should make sure there is only one logical step between them.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you are trying a new direction with your code, or want to create an alternative version. It helps because you can keep the base project untouched, by checking out a branch and working purely with then.


git status checks what files file been modified but not staged for commit.

git add asteroids  Adds asteroids to the staging area

git checkout coins  Checks out a different branch

git log --graph --oneline master coins  Compares master branch and coins branch.

Use diagrams to help you visualize the branch structure.

'git diff' shows differences between working directory and staging area
'dit diff --staged' shows differences between staging area and repository

How can you use the staging area to make sure you have one commit per logical change?
After staging, but before putting in the repository, you can easily compare the changes in the file to the one in the repository, and confirm it is a single logical change.

'git log --graph --oneline branch_1 branch_2'

'git checkout -b new_branch_name' combines two commands: 1) git branch new_branch_name; 2) git checkout new_branch_name.

How do the diagrams help you visualize the branch structure? They show branches that have been started, and allows you to trace their parents.

What is the result of merging two branches together?  The combined commits of the two branches are merged into a single branch

Why do we represent it in the diagram the way we do? To track what commits came from which branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually? Automatic merging gives up some control, but to do all the merging manually would be a gargantuan task.






